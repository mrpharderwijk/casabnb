// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           Name?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId

  accounts     Account[]
  listings     Listing[]
  reservations Reservation[]
  ListingImage ListingImage[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String?
  description String?
  price       Int?
  structure   String?
  privacyType String?
  status      ListingStatus @default(DRAFT)
  createdAt   DateTime      @default(now())

  userId       String            @db.ObjectId
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
  location     ListingLocation?
  floorPlan    ListingFloorPlan?
  images       ListingImage[]
}

model ListingLocation {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  country        String
  province       String
  city           String
  streetName     String
  houseNumber    String
  postalCode     String
  latitude       Float
  longitude      Float
  aptInfo        String?
  additionalInfo String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  listingId String  @unique @db.ObjectId
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model ListingFloorPlan {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  guestCount    Int?
  roomCount     Int?
  bathroomCount Int?
  bedroomCount  Int?
  bedCount      Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  listingId String  @unique @db.ObjectId
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model ListingImage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fileName  String
  size      Int
  key       String
  fileHash  String   @unique
  url       String
  fileType  String
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listingId String  @db.ObjectId
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

enum ListingStatus {
  DRAFT
  IN_REVIEW
  PUBLISHED
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())

  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Name {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName  String
  middleName String?
  lastName   String
  userId     String  @unique @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
